// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Countries REST API deletes based on queries with EQ 1`] = `
Array [
  Object {
    "iso3166alpha2": "AD",
    "name": "Andorra",
  },
]
`;

exports[`Countries REST API deletes based on queries with EQ 2`] = `Object {}`;

exports[`Countries REST API deletes based on queries with EQ 3`] = `Array []`;

exports[`Countries REST API deletes based on queries with IN 1`] = `
Array [
  Object {
    "iso3166alpha3": "AUS",
    "name": "Australia [b]",
    "tld": ".au",
  },
]
`;

exports[`Countries REST API deletes based on queries with IN 2`] = `Object {}`;

exports[`Countries REST API deletes based on queries with IN 3`] = `Array []`;

exports[`Countries REST API deletes based on queries with IS 1`] = `
Array [
  Object {
    "is_monarchy": 1,
    "sovereignty": "British Crown",
  },
  Object {
    "is_monarchy": 1,
    "sovereignty": "Australia",
  },
  Object {
    "is_monarchy": 0,
    "sovereignty": "Antarctic Treaty",
  },
  Object {
    "is_monarchy": 0,
    "sovereignty": "China",
  },
  Object {
    "is_monarchy": 1,
    "sovereignty": "Denmark",
  },
  Object {
    "is_monarchy": null,
    "sovereignty": "Disputed",
  },
  Object {
    "is_monarchy": 0,
    "sovereignty": "France",
  },
  Object {
    "is_monarchy": 1,
    "sovereignty": "Netherlands",
  },
  Object {
    "is_monarchy": 1,
    "sovereignty": "New Zealand",
  },
  Object {
    "is_monarchy": 1,
    "sovereignty": "Norway",
  },
]
`;

exports[`Countries REST API deletes based on queries with IS 2`] = `Object {}`;

exports[`Countries REST API deletes based on queries with IS 3`] = `Object {}`;

exports[`Countries REST API deletes based on queries with IS 4`] = `Object {}`;

exports[`Countries REST API deletes based on queries with IS 5`] = `Array []`;

exports[`Countries REST API deletes based on queries with LIKE 1`] = `
Array [
  Object {
    "iso3166alpha3": "ARE",
    "name": "United Arab Emirates (the)",
  },
  Object {
    "iso3166alpha3": "GBR",
    "name": "United Kingdom of Great Britain and Northern Ireland (the)",
  },
  Object {
    "iso3166alpha3": "USA",
    "name": "United States of America (the)",
  },
  Object {
    "iso3166alpha3": "UMI",
    "name": "United States Minor Outlying Islands (the) [ac]",
  },
]
`;

exports[`Countries REST API deletes based on queries with LIKE 2`] = `Object {}`;

exports[`Countries REST API deletes based on queries with LIKE 3`] = `Array []`;

exports[`Countries REST API does not delete if no parameters given 1`] = `
Object {
  "error": "No deletion parameters provided; total table deletion will not occur",
}
`;

exports[`Countries REST API queries with EQ 1`] = `
Array [
  Object {
    "iso3166alpha3": "CAN",
    "name": "Canada",
    "tld": ".ca",
  },
]
`;

exports[`Countries REST API queries with EQ is unchanged when trying to query through blob column 1`] = `
Array [
  Object {
    "name": "Canada",
    "tld": ".ca",
  },
]
`;

exports[`Countries REST API queries with IN 1`] = `
Array [
  Object {
    "iso3166alpha3": "AUS",
    "name": "Australia [b]",
    "tld": ".au",
  },
  Object {
    "iso3166alpha3": "USA",
    "name": "United States of America (the)",
    "tld": ".us",
  },
]
`;

exports[`Countries REST API queries with IS 1`] = `
Array [
  Object {
    "name": "United States",
  },
  Object {
    "name": "United Kingdom",
  },
  Object {
    "name": "France",
  },
  Object {
    "name": "China",
  },
]
`;

exports[`Countries REST API queries with IS 2`] = `
Array [
  Object {
    "name": "Norway",
  },
  Object {
    "name": "New Zealand",
  },
  Object {
    "name": "Netherlands",
  },
  Object {
    "name": "Denmark",
  },
  Object {
    "name": "British Crown",
  },
  Object {
    "name": "Australia",
  },
  Object {
    "name": "Antarctic Treaty",
  },
]
`;

exports[`Countries REST API queries with IS 3`] = `
Array [
  Object {
    "name": "UN observer state",
  },
  Object {
    "name": "Disputed",
  },
]
`;

exports[`Countries REST API queries with IS 4`] = `
Array [
  Object {
    "name": "Afghanistan",
  },
]
`;

exports[`Countries REST API queries with LIKE 1`] = `
Array [
  Object {
    "iso3166alpha3": "ARE",
    "name": "United Arab Emirates (the)",
    "tld": ".ae",
  },
  Object {
    "iso3166alpha3": "GBR",
    "name": "United Kingdom of Great Britain and Northern Ireland (the)",
    "tld": ".gb.uk [ab]",
  },
  Object {
    "iso3166alpha3": "USA",
    "name": "United States of America (the)",
    "tld": ".us",
  },
  Object {
    "iso3166alpha3": "UMI",
    "name": "United States Minor Outlying Islands (the) [ac]",
    "tld": null,
  },
]
`;

exports[`Countries REST API queries with LIMIT, OFFSET, and ORDER 1`] = `
Array [
  Object {
    "iso3166alpha3": "DZA",
    "name": "Algeria",
    "tld": ".dz",
  },
  Object {
    "iso3166alpha3": "ASM",
    "name": "American Samoa",
    "tld": ".as",
  },
  Object {
    "iso3166alpha3": "AND",
    "name": "Andorra",
    "tld": ".ad",
  },
  Object {
    "iso3166alpha3": "AGO",
    "name": "Angola",
    "tld": ".ao",
  },
  Object {
    "iso3166alpha3": "AIA",
    "name": "Anguilla",
    "tld": ".ai",
  },
  Object {
    "iso3166alpha3": "ATA",
    "name": "Antarctica [a]",
    "tld": ".aq",
  },
]
`;

exports[`Countries REST API queries with LT (Less Than) 1`] = `
Array [
  Object {
    "iso3166alpha3": "AFG",
    "name": "Afghanistan",
    "numeric": 4,
  },
  Object {
    "iso3166alpha3": "ALB",
    "name": "Albania",
    "numeric": 8,
  },
  Object {
    "iso3166alpha3": "ATA",
    "name": "Antarctica [a]",
    "numeric": 10,
  },
  Object {
    "iso3166alpha3": "DZA",
    "name": "Algeria",
    "numeric": 12,
  },
  Object {
    "iso3166alpha3": "ASM",
    "name": "American Samoa",
    "numeric": 16,
  },
]
`;

exports[`Countries REST API returns an error message when an invalid column is queried 1`] = `
Object {
  "error": "select * from \`countries\` where area51 = 'aliengray' limit 10 - no such column: area51",
}
`;

exports[`Countries REST API returns with the raw binary if choosing a single BLOB column with a single row (unrecognized binary content) 1`] = `
Object {
  "data": Array [
    52,
    18,
    1,
    0,
    96,
    141,
    45,
    231,
    43,
    119,
    66,
    76,
    171,
    47,
    185,
    61,
    252,
    55,
    144,
    207,
    232,
    52,
    118,
    103,
    252,
    167,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    168,
    0,
    0,
    209,
    144,
    172,
    181,
    72,
    117,
    195,
    122,
    1,
    0,
    0,
    0,
    11,
    168,
    0,
    0,
    100,
    213,
    59,
    49,
    24,
    232,
    213,
    122,
    1,
    0,
    0,
    0,
    12,
    168,
    0,
    0,
    243,
    198,
    164,
    65,
    112,
    37,
    209,
    122,
    1,
    0,
    0,
    0,
    13,
    168,
    0,
    0,
    29,
    131,
    15,
    176,
    168,
    94,
    222,
    122,
    1,
    0,
    0,
    0,
    14,
    168,
    0,
    0,
    81,
    124,
    250,
    194,
    8,
    72,
    233,
    122,
    2,
    0,
    0,
    0,
    15,
    168,
    0,
    0,
    40,
    197,
    246,
    138,
    52,
    32,
    240,
    122,
    1,
    0,
    0,
    0,
    16,
    168,
    0,
    0,
    6,
    218,
    15,
    48,
    48,
    248,
    248,
    122,
    1,
    0,
    0,
    0,
    17,
    168,
    0,
    0,
    206,
    175,
    94,
    199,
    60,
    208,
    135,
    122,
    1,
    0,
    0,
    0,
    18,
    168,
    0,
    0,
    119,
    70,
    155,
    85,
    148,
    13,
    131,
    122,
    1,
    0,
    0,
    0,
    19,
    168,
    0,
    0,
    230,
    121,
    83,
    170,
    144,
    229,
    139,
    122,
    1,
    0,
    0,
    0,
    20,
    168,
    0,
    0,
    7,
    53,
    124,
    74,
    200,
    30,
    151,
    122,
    1,
    0,
    0,
    0,
  ],
  "type": "Buffer",
}
`;

exports[`Countries REST API returns with the raw binary if choosing a single BLOB column with a single row 1`] = `
Object {
  "data": Array [
    71,
    73,
    70,
    56,
    57,
    97,
    18,
    0,
    12,
    0,
    230,
    0,
    0,
    246,
    235,
    16,
    238,
    31,
    36,
    31,
    66,
    153,
    32,
    66,
    153,
    41,
    63,
    153,
    27,
    69,
    149,
    27,
    69,
    148,
    22,
    76,
    161,
    246,
    235,
    20,
    246,
    236,
    20,
    247,
    236,
    18,
    28,
    69,
    148,
    246,
    236,
    17,
    148,
    134,
    49,
    246,
    235,
    17,
    247,
    235,
    18,
    26,
    70,
    149,
    26,
    71,
    153,
    40,
    63,
    153,
    29,
    67,
    152,
    236,
    228,
    15,
    160,
    45,
    35,
    238,
    232,
    33,
    241,
    233,
    21,
    195,
    169,
    47,
    183,
    40,
    37,
    32,
    65,
    152,
    215,
    194,
    39,
    130,
    63,
    50,
    212,
    222,
    37,
    27,
    70,
    148,
    162,
    188,
    58,
    188,
    140,
    45,
    33,
    64,
    151,
    123,
    66,
    37,
    158,
    96,
    38,
    33,
    65,
    151,
    219,
    224,
    32,
    30,
    66,
    155,
    238,
    30,
    36,
    28,
    70,
    150,
    187,
    139,
    44,
    139,
    28,
    35,
    227,
    222,
    26,
    107,
    13,
    29,
    147,
    64,
    32,
    243,
    234,
    22,
    195,
    176,
    48,
    248,
    152,
    58,
    144,
    70,
    39,
    147,
    60,
    42,
    187,
    66,
    38,
    225,
    110,
    39,
    247,
    236,
    17,
    160,
    97,
    39,
    31,
    65,
    154,
    238,
    31,
    37,
    167,
    81,
    41,
    160,
    45,
    34,
    31,
    69,
    157,
    248,
    236,
    19,
    23,
    72,
    158,
    25,
    70,
    152,
    242,
    234,
    20,
    234,
    127,
    42,
    158,
    96,
    39,
    181,
    188,
    52,
    238,
    32,
    36,
    28,
    69,
    149,
    246,
    235,
    19,
    237,
    30,
    36,
    28,
    70,
    149,
    237,
    32,
    36,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    33,
    249,
    4,
    0,
    0,
    0,
    0,
    0,
    44,
    0,
    0,
    0,
    0,
    18,
    0,
    12,
    0,
    0,
    7,
    157,
    128,
    73,
    130,
    131,
    132,
    133,
    132,
    11,
    68,
    71,
    2,
    4,
    69,
    15,
    0,
    0,
    10,
    60,
    1,
    72,
    1,
    67,
    72,
    130,
    5,
    5,
    138,
    140,
    9,
    12,
    69,
    9,
    8,
    67,
    1,
    70,
    56,
    151,
    73,
    68,
    137,
    26,
    55,
    10,
    20,
    24,
    47,
    37,
    23,
    72,
    70,
    70,
    39,
    166,
    71,
    68,
    16,
    33,
    59,
    69,
    25,
    44,
    58,
    50,
    29,
    72,
    150,
    72,
    166,
    137,
    71,
    19,
    61,
    32,
    57,
    28,
    51,
    35,
    13,
    196,
    196,
    1,
    130,
    168,
    6,
    36,
    7,
    43,
    45,
    54,
    48,
    52,
    31,
    208,
    194,
    130,
    71,
    11,
    30,
    2,
    7,
    41,
    42,
    65,
    64,
    21,
    207,
    70,
    208,
    224,
    71,
    6,
    3,
    38,
    8,
    27,
    49,
    34,
    66,
    63,
    196,
    67,
    179,
    224,
    40,
    16,
    3,
    18,
    69,
    138,
    88,
    112,
    81,
    4,
    0,
    177,
    89,
    166,
    34,
    248,
    136,
    240,
    143,
    129,
    131,
    7,
    53,
    28,
    24,
    60,
    104,
    202,
    144,
    69,
    66,
    129,
    0,
    0,
    59,
  ],
  "type": "Buffer",
}
`;
